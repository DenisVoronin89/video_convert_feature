Внесенные изменения в проект точка сейва 13.12.2024:

1. Сразу прикрутил PostgreSQL (Когда будем работать с геоданными - поставим расширение postgis)
2. Поменял кодек на VP9 (можно рассмотреть еще Н265, но он, как гласит дока - платный, но вроде как можно наколоть систему (см. файл Codecs)
3. Ушел от subprocess в функциях конвертации и извлечения превью (разобрался почему сабпроцесс не есть гуд)
4. Разделил некоторые фукции, пришел к формату(или принципу) SRP
5. Добавил лог на измерение веса файлов
6. Собрана информация по самым распространенным кодекам для обработки видео и сведена в файл Codecs.txt.
   Два подходящих нам выведены в сравнительную таблицу и к ним добавлено более подробное описание
7. Длинну превью вывел в переменную, чтобы проще было потом подогнать по длительности как нам надо
8. Битрейт пока 2М, но руки чешутся 4-5 поставить чтобы качество 4К тянуло (надо это будет протестить на производительность)
9. Добавлены BackgroundTasks для управления задачами, которые будут выполняться в фоне. Использование background_tasks.add_task:
    задачи для конвертации видео, извлечения превью, загрузки в S3 и сохранения в базе данных. После того как задачи добавлены в фон,
    функция возвращает ответ клиенту без задержек, а все ресурсоемкие операции выполняются асинхронно. Тяжелые задачи варятся в фоне,
    клиент не ждет, а юзает нашу приложуху без ожидания и счастлив
    (Надо только потом какое то пуш уведомление прикрутить чтобы клиент видел что фоновые задачи отработали и видос залит)

Внесенные изменения в проект точка сейва 20.12.2024:

1. Код разбит по модулям
2. Доработана таблица, не стал делать промежуточную таблицу (босс сказал проверка оплаты будет по транзакции, смысл кидать все в промежуточную БД?
   Тут либо оплачивают сразу и проверка проходит, так как транзакцию ловим моментом, либо потом снова форму пускай заполняет, так вроде все
   интернет магазины и доски объявлений работают), форма кэшироваться будет на фронте пока проверка платежа идет
3. После кнопки ADD(или PAY может ее назовем?) нас перекидывает на метамаск кошелек - мы платим,
    в это время в фоне уже крутися функция на проверку платежа. Как только поймали платеж
    в фоне начинает крутиться основной процесс конвертация-превью-загрузка-сохранение профиля в БД
4. Реализовано автоматическое удаление временных файлов, запуск в 00:00 ежедневно и сносит все, что старше 48 часов
5. Реализовал фоновые задачи через sub and pub, как просил Евгений (есть куча вопросов спросить Женю на созвоне)
6. Добавлена таблица с хэштегами, ассоциативная таблица для связи хэштегов и видео, функции для работы с хэштэгаим
7. Переделана логика сохранения в БД, добавлена проверка пользователя по номеру кошелька и соответственно происходит либо
   создание нового юзера либо обновление записей существующего
8. Реализован функционал проверки оплаты и модерации, пока моковый
9. Добавлен функционал сохранения лого (аватарки)
10. Добавлен функционал работы с формами и обработки формы
11. Функционал создания папок тоже поменял, сделал переменную с нужным списком директорий (словарь) для простоты расширения функционала
12. Реализовал проверку хэшегов на запрещенные слова6 есть узкое место (описано ниже)


УЗКИЕ МЕСТА И ВОЗМОЖНЫЕ ПРОБЛЕМЫ:
1. Бесконечное количество попыток загрузить видео и изображение и будет переполнена папка темп. Пример когда мы после предпросмотра жмем отмену
и грузим новый видос и так бесконечно до сохранения - выглядидт как дэдос (Обсудить с Евгением как лучше запилить и защититься, в безопасность
пока не погружался, исправлю)

2. Второй момент проверка типа файла. Проверка содержимого ресурсоемка и это будет критично когда у нас будет много юзеров,
Да, можно сделать проверку на валидность файлов без их открытия. Это будет базироваться на MIME-типах файлов и расширениях.
Однако, это будет не так надежно, как проверка содержимого файлов, поскольку можно столкнуться с ситуациями, когда файл имеет правильный
MIME-тип или расширение, но на самом деле является поврежденным или неправильного формата. Вроде судя по мануалам и бест практикам это
решение самое оптимальное и я выбрал его

3. Проверка на хэштеги с неприменимым контентом: нужно будет сделать более гибкую проверку или добавить список запрещенных слов. Обсудить это с командой и
уточнить требования ( ну слов так то вагон, список/кортеж из запрещенных слов делать мы офигеем) - спросить совет у Евгения. Использовать регулярные
выражения для поиска конкретных запрещенных слов или воспользоваться сторонними библиотеками для фильтрации контента.
Оба метода имеют свои преимущества и могут быть использованы в зависимости от нашей задачи. (пока что взял на себя ответственность и
сгенерировал в чате гпт словарь, который содержит в себе все основные плохие запрещенные ключевые слова в ру и енг сегменте)
Юридически это пока узкое место, особенно когда мы начнем уходить от человеческой модерации (еть решение - нейронка, но их дообучать надо)

4. Эндпоинт сохранения профиля: много блоков try-except, хотя каждый потенциально проблемный участок обернут в свой try-except,
что упрощает диагностику и логирование ошибок. Но это выглядит не читаемо! Ключевые этапы обработки (например, проверка файлов, публикация в Redis)
имеют свои try-except,  что защищает остальные части функции от падения (наверное).
Появится время - я займусь этим блоко м и приведу его в человеческий вид!






ДЛЯ ПРОВЕРКИ ЕНДПОИНТА ВАЛИДАЦИИ ФОРМЫ! (МАКСУ ДЛЯ РАБОТЫ)
{
  "name": "John Doe",
  "url": "https://example.com",
  "activity_hobbies": "Gaming, Traveling",
  "hashtags": "#gaming #traveling",
  "is_incognito": false
}

ПУТИ К ФАЙЛАМ ДЛЯ ТЕСТА И ПЕРЕДАЧИ В СВАГГЕРЕ (ЭТО МАКСУ ДЛЯ РАБОТЫ ЧЕ НА ЕНДПОИНТ ПРИЛЕТЕТЬ ДОЛЖНО!)

{
  "profile_data": {
     "name": "John Doe",
     "url": "https://example.com",
     "activity_hobbies": "Gaming, Traveling",
     "hashtags": "#gaming #traveling",
     "is_incognito": false
  },
  "image_data": {
    "image_path": "./image_temp/59c65960-0a66-4d03-b93e-7de45acf80fe_orig.webp"
  },
  "video_data": {
    "video_path": "./video_temp/0acbc098-be1a-47f0-840e-8ee784c1dca9_cat.mp4"
  }
}




ПРИКОЛЬНАЯ КОМАНДА СМОТРЕТЬ СКОЛЬКО СТРОК НАШЛЕПАЛ, ТЕШИМ ДЖУНОВСКОЕ РАЗДУТОЕ ЭГО))))

find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" -not -path "./.*/*" | xargs wc -l | tail -n 1