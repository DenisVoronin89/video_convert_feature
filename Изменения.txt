Внесенные изменения в проект точка сейва 13.12.2024:

1. Сразу прикрутил PostgreSQL
2. Поменял кодек на VP9 (можно рассмотреть еще Н265, но он, как гласит дока - платный, но вроде как можно наколоть систему (см. файл Codecs)
3. Ушел от subprocess в функциях конвертации и извлечения превью (разобрался почему сабпроцесс не есть гуд)
4. Разделил некоторые фукции, пришел к формату(или принципу) SRP
5. Добавил лог на измерение веса файлов
6. Собрана информация по самым распространенным кодекам для обработки видео и сведена в файл Codecs.txt.
   Два подходящих нам выведены в сравнительную таблицу и к ним добавлено более подробное описание
7. Длинну превью вывел в переменную, чтобы проще было потом подогнать по длительности как нам надо
8. Битрейт пока 2М, но руки чешутся 4-5 поставить чтобы качество 4К тянуло (надо это будет протестить на производительность)
9. Добавлены BackgroundTasks для управления задачами, которые будут выполняться в фоне. Использование background_tasks.add_task:
    задачи для конвертации видео, извлечения превью, загрузки в S3 и сохранения в базе данных. После того как задачи добавлены в фон,
    функция возвращает ответ клиенту без задержек, а все ресурсоемкие операции выполняются асинхронно. Тяжелые задачи варятся в фоне,
    клиент не ждет, а юзает нашу приложуху без ожидания и счастлив
    (Надо только потом какое то пуш уведомление прикрутить чтобы клиент видел что фоновые задачи отработали и видос залит)

Внесенные изменения в проект точка сейва 20.12.2024:

1. Код разбит по модулям
2. Доработана таблица, не стал делать промежуточную таблицу (босс сказал проверка оплаты будет по транзакции, смысл кидать все в промежуточную БД?
   Тут либо оплачивают сразу и проверка проходит, так как транзакцию ловим моментом, либо потом снова форму пускай заполняет, так вроде все
   интернет магазины и доски объявлений работают), форма кэшироваться будет на фронте пока проверка платежа идет
3. После кнопки ADD(или PAY может ее назовем?) нас перекидывает на метамаск кошелек - мы платим,
    в это время в фоне уже крутися функция на проверку платежа. Как только поймали платеж
    в фоне начинает крутиться основной процесс конвертация-превью-загрузка-сохранение профиля в БД
4. Реализовано автоматическое удаление временных файлов, запуск в 00:00 ежедневно и сносит все, что старше 48 часов
5. Реализовал фоновые задачи через sub and pub, как просил Евгений (есть куча вопросов спросить Евгения на созвоне)
6. Добавлена таблица с хэштегами, ассоциативная таблица для связи хэштегов и видео, функции для работы с хэштэгаим
7. Переделана логика сохранения в БД, добавлена проверка пользователя по номеру кошелька и соответственно происходит либо
   создание нового юзера либо обновление записей существующего
8. Реализован функционал проверки оплаты и модерации, пока моковый
9. Добавлен функционал сохранения лого (аватарки)
10. Добавлен функционал работы с формами и обработки формы, валидация формы и ее данных
11. Функционал создания папок тоже поменял, сделал переменную с нужным списком директорий (словарь) для простоты расширения функционала
12. Реализовал проверку хэшегов на запрещенные слова, есть узкое место (описано ниже)
13. Реализовано хэширование кошельков (Пожелание босса)
14. Реализовано получение, сохранение и отдача геоданных
15. Все теперь работает через докер, как микросервисы (докерфайлы реализованы кринжово, но работают. Евгений, сильно не бей)))
16. Отлажено и оттестировано, передал Максу в работу


Внесенные изменения в проект точка сейва .2024:

1. Передалана архитектура БД, добавлены избранное, созданные профили вынесены в отдельную таблицу, проложены связи
2. В Редис кэшируем счетчик подписчиков, список избранного для каждого профиля
3. Добавлен функционал для актуализации данных в кэше и БД
4. Написаны эндпоинты для добавления/удаления избранного и уеньшения/увеличения счетчика подписчиков
5. Реализован функционал отдачи первых 50 профилей из кэша(получение 50 профилей по расписанию и кэширование их)
6. Реализованы во всех поисковых эндпоинтах сортировки по популярности и новизне
7. Реализована отдача профилей по городу, по хэштегам
8. Кэширование запросов по хэштегам, по причине что они выполняются чаще и тяжелее
9. Реализована отдача всех профилей
10. Реализована работа с геоданными, постгис
11. Реализован функционал ленивой загрузки
12, Реализован функционал операций, выполняющихся по расписанию, использован АПИшедлер


 УЗКИЕ МЕСТА И ВОЗМОЖНЫЕ ПРОБЛЕМЫ:

1. Бесконечное количество попыток загрузить видео и изображение и будет переполнена папка темп. Пример когда мы после предпросмотра жмем отмену
и грузим новый видос и так бесконечно до сохранения - выглядидт как дэдос (Обсудить с Евгением как лучше запилить и защититься, в безопасность
пока не погружался, исправлю)

2. Второй момент проверка типа файла. Проверка содержимого ресурсоемка и это будет критично когда у нас будет много юзеров,
Да, можно сделать проверку на валидность файлов без их открытия. Это будет базироваться на MIME-типах файлов и расширениях.(сейчас это и сделано)
Однако, это будет не так надежно, как проверка содержимого файлов, поскольку можно столкнуться с ситуациями, когда файл имеет правильный
MIME-тип или расширение, но на самом деле является поврежденным или неправильного формата. Вроде судя по мануалам и бест практикам это
решение самое оптимальное и я выбрал его

3. Проверка на хэштеги с неприменимым контентом: нужно будет сделать более гибкую проверку или добавить список запрещенных слов. Обсудить это с командой и
уточнить требования (ну слов так то вагон, список/кортеж из запрещенных слов делать мы офигеем) - спросить совет у Евгения. Использовать регулярные
выражения для поиска конкретных запрещенных слов или воспользоваться сторонними библиотеками для фильтрации контента.
Оба метода имеют свои преимущества и могут быть использованы в зависимости от нашей задачи. (пока что взял на себя ответственность и
сгенерировал в чате гпт словарь, который содержит в себе все основные плохие запрещенные ключевые слова в ру и енг сегменте)
Юридически это пока узкое место, особенно когда мы начнем уходить от человеческой модерации (еть решение - нейронка, но их дообучать надо)
Сделал пока список запрещенных слов, не нашел адекватной либы которая поддерживает русский запрещенный завуалированный фольклор, особенно
наркоманский

4. Эндпоинт сохранения профиля: много блоков try-except, хотя каждый потенциально проблемный участок обернут в свой try-except,
что упрощает диагностику и логирование ошибок. Но это выглядит не читаемо! Ключевые этапы обработки (например, проверка файлов, публикация в Redis)
имеют свои try-except,  что защищает остальные части функции от падения (наверное).
Появится время - я займусь этим блоком и приведу его в человеческий вид!

5. Бардак в коде, после одобрения Евгением, надо перенести подписчик в отдельную директорию и файлы(модули) необходимые ему для работы.
   Не надо в контейнер пихать лишнее. Основное приложение надо тоже поместить в отдельный пакет
   (сделаю на этапе интеграции с бэком, который уже написан для нашего сайта)

6. Криво очень написаны докерфайлы (Отработать с Евгением, отрефакторить и впитать знания на будущие проекты)

7. Все ключи необходимо спрятать перед продакшеном, когда уже на нагрузочное тестирование пойдем и будем точно знать все сервисы,
    которые будем использовать (особенно касается ямл файла). Это уязвимое место в безопасности (в голове держу и исправлю)

8. При обновлении профиля надо удалять все старые записи(видео) из хранилища, заранее не продумал. В процессе реализации

9. Отсутствует кнопка и соответственно функционал удаления пользователя. Согласовать с командой и реализовать







ПУТИ К ФАЙЛАМ ДЛЯ ТЕСТА И ПЕРЕДАЧИ В СВАГГЕРЕ (ЭТО МАКСУ ДЛЯ РАБОТЫ ЧТО НА ЕНДПОИНТ ПРИЛЕТЕТЬ ДОЛЖНО!)

{
  "profile_data": {
    "activity_hobbies": "Долбиться в свое очко!",
    "adress": [
      "123 Example Street, Example City",
      "456 Another Street, Another City"
    ],
    "city": "Example City",
    "coordinates": [
      [
        37.7749,
        -122.4194
      ],
      [
        48.8566,
        2.3522
      ]
    ],
    "hashtags": [
      "#gaming",
      "#travel",
      "#photography"
    ],
    "is_in_mlm": 1,
    "is_incognito": false,
    "name": "Кусок ссанины",
    "wallet_number": "0x39b0B8cfa77fA65f36Ad653F649D36EBC7d4475",
    "website_or_social": "https://twitter.com/johndoe"
  },
  "image_data": {
    "image_path": "./image_temp/9cc7f20d-46cc-4375-977b-401228b60669_молекула_preview_rev_1.png"
  },
  "video_data": {
    "video_path": "./video_temp/bb71439d-fcd1-44cc-a958-33ed14944960_100236-video-720.mp4"
  }
}



кошелек для тестов: 0x27b0B8cfa07fA60f36Ad953F679D36EBC7d4355



ДЛЯ ЭНДПОИНТА БЕЗ ВИДЕО

{
  "form_data": {
    "activity_hobbies": "Gaming, Traveling",
    "adress": [
      "123 Example Street, Example City",
      "456 Another Street, Another City"
    ],
    "city": "нахуй все",
    "coordinates": [
      [
        59.7700,
        37.6800
      ]
    ],
    "hashtags": [
      "#gaming",
      "#travel",
      "#photography"
    ],
    "is_in_mlm": 1,
    "is_incognito": false,
    "name": "Ебись все в рот!!!",
    "wallet_number": "0x27b0B8cfa07fA72f36Ad953F679D36EBC7d4355",
    "website_or_social": "https://twitter.com/johndoe"
  },
  "image_data": {
    "image_path": "./image_temp/f8ac0ec9-9c29-4db3-b742-50093f6c0f53_orig_cat.webp"
  }
}

Brianfort

John Гнилой



сколько строк кода?)

find . -type f -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" -not -path "./env/*" -not -path "./.env/*" | xargs wc -l



(37.64, 55.761)



(105.1312, 11.6338)

"id": 155

спорт

босс валет 0x789132f1324d186619bD4F2E57D424f776ec3cdB
дать права 0x27b0B8cfa07fA98f36Ad674F679D36EBC7d4355



2025-03-19 15:30:02,757 - INFO - Начинаю извлечение постера для /app/video_temp/27da1518-70a2-47dd-9061-090beccf0fa9_99878-video-720.mp4

user_video_posters/b4d45240d51a449482b082aa4a3db179.jpg